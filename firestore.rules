rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isModerator() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true;
    }

    function isValidRating(rating) {
      return rating is number && rating >= 1 && rating <= 5;
    }

    function isValidBookData() {
      return request.resource.data.keys().hasAll(['id', 'title', 'author']) &&
             request.resource.data.title is string &&
             request.resource.data.author is string;
    }

    // Users collection - Enhanced for BookRec features
    match /users/{userId} {
      allow read: if true; // Public profiles
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'displayName']) &&
        request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Books collection - For cached book data
    match /books/{bookId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && isValidBookData();
      allow update: if isAuthenticated() && isValidBookData();
      allow delete: if isAdmin();
    }

    // Reviews collection - Enhanced validation
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['bookId', 'userId', 'userName', 'rating', 'text', 'bookTitle', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid &&
        isValidRating(request.resource.data.rating) &&
        request.resource.data.text is string &&
        request.resource.data.text.size() <= 1000;
      allow update: if isOwner(resource.data.userId) && 
        isValidRating(request.resource.data.rating) &&
        request.resource.data.text.size() <= 1000;
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isModerator();
    }

    // Posts collection - Social features
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['userId', 'userName', 'content', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.content.size() <= 2000;
      allow update: if isOwner(resource.data.userId) && 
        request.resource.data.content.size() <= 2000;
      allow delete: if isOwner(resource.data.userId) || isAdmin() || isModerator();
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.keys().hasAll(['userId', 'userName', 'content', 'timestamp']) &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.content.size() <= 500;
        allow update: if isOwner(resource.data.userId);
        allow delete: if isOwner(resource.data.userId) || isAdmin() || isModerator();
      }
      
      // Likes subcollection
      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow delete: if isOwner(resource.data.userId);
      }
    }

    // Book clubs collection
    match /bookClubs/{clubId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['name', 'description', 'createdBy', 'members', 'isPublic']) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || 
         request.auth.uid in resource.data.moderators);
      allow delete: if resource.data.createdBy == request.auth.uid || isAdmin();
      
      // Book club posts
      match /posts/{postId} {
        allow read: if resource.data.isPublic == true || 
          request.auth.uid in get(/databases/$(database)/documents/bookClubs/$(clubId)).data.members;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/bookClubs/$(clubId)).data.members;
        allow update, delete: if isOwner(resource.data.userId) || 
          request.auth.uid in get(/databases/$(database)/documents/bookClubs/$(clubId)).data.moderators;
      }
    }

    // User favorites and reading lists
    match /users/{userId}/favorites/{bookId} {
      allow read: if true;
      allow write: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/readingList/{bookId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/likedBooks/{bookId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/dislikedBooks/{bookId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // User interactions and swipe history
    match /users/{userId}/interactions/{interactionId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['bookId', 'action', 'timestamp']);
      allow delete: if isOwner(userId);
    }

    // Notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated(); // System can create notifications
      allow update: if isOwner(userId); // User can mark as read
      allow delete: if isOwner(userId);
    }

    // Reports and moderation
    match /reports/{reportId} {
      allow read: if isAdmin() || isModerator();
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['reportedBy', 'type', 'targetId', 'reason']) &&
        request.resource.data.reportedBy == request.auth.uid;
      allow update: if isAdmin() || isModerator();
      allow delete: if isAdmin();
    }

    // Admin logs
    match /logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin() || isModerator();
      allow delete: if isAdmin();
    }

    // System settings (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}